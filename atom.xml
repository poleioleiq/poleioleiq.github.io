<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mmmwwwttt</title>
  
  <subtitle>一个直男</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-19T17:00:34.956Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>oleiolei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日常</title>
    <link href="http://yoursite.com/2019/07/20/%E6%97%A5%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/07/20/日常/</id>
    <published>2019-07-19T16:58:38.000Z</published>
    <updated>2019-07-19T17:00:34.956Z</updated>
    
    <content type="html"><![CDATA[<p>部署了hexo+github的博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;部署了hexo+github的博客&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>还是畅通工程</title>
    <link href="http://yoursite.com/2019/07/20/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/07/20/还是畅通工程/</id>
    <published>2019-07-19T16:17:26.000Z</published>
    <updated>2019-07-20T03:31:20.344Z</updated>
    
    <content type="html"><![CDATA[<pre><code>#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;&lt;!--more--&gt;#include &lt;cstring&gt;#include &lt;climits&gt;#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;stack&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;#include &lt;map&gt;#define maxx 0x3f3f3f3f#define ll long long#define FAST_IO std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0)#define lson l, m, rt &lt;&lt; 1#define rson m + 1, r, rt &lt;&lt; 1 | 1using namespace std;const int maxn = 1e4 + 5;int ran[maxn];int pre[maxn];int n, m;void init(){    for (int i = 1; i &lt;= n; i++) {        pre[i] = i;        ran[i] = 1;    }}int find(int x){    if (x == pre[x]) return x;    return pre[x] = find(pre[x]);}void join(int x, int y){    int fx = find(x);    int fy = find(y);    if (fx == fy) return;    if (ran[x] &lt; ran[y]) pre[fx] = fy;    else {        pre[fy] = fx;        if (ran[fx] == ran[fy]) ran[fx]++;    }}int main(){    FAST_IO;    while (cin &gt;&gt; n, n) {        cin &gt;&gt; m;        init();        int a, b;        while (m--) {            cin &gt;&gt; a &gt;&gt; b;            join(a, b);        }        int ans = 0;        for (int i = 1; i &lt;= n; i++) {            if (pre[i] == i) ans++;        }        cout &lt;&lt; ans - 1 &lt;&lt; endl;    }    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cmath&amp;gt;

&amp;lt;!--more--&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt
      
    
    </summary>
    
    
      <category term="hdu1323 畅通工程" scheme="http://yoursite.com/tags/hdu1323-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
