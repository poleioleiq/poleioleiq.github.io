<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>元素除重的方法比较</title>
      <link href="/2019/10/16/%E5%85%83%E7%B4%A0%E9%99%A4%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"/>
      <url>/2019/10/16/%E5%85%83%E7%B4%A0%E9%99%A4%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>如题：有List<string> list1和List<string> list2,两个集合各有上万个元素，怎样取出两个集合中不同的元素?</string></string></p><a id="more"></a><p><strong>方法1</strong>：遍历两个集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.czp.test;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">            list1.add(<span class="string">"test"</span>+i);  </span><br><span class="line">            list2.add(<span class="string">"test"</span>+i*<span class="number">2</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        getDiffrent(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：total times 2566454675  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span>(String str:list1)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(!list2.contains(str))  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(str);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>千万不要采用这种方法，总共要循环的次数是两个List的size相乘的积，从输出看耗时也是比较长的，那么我们有没有其他的方法呢？当然有.<br><strong>方法2</strong>：采用List提供的retainAll（）方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.czp.test;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">            list1.add(<span class="string">"test"</span>+i);  </span><br><span class="line">            list2.add(<span class="string">"test"</span>+i*<span class="number">2</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        getDiffrent(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：total times 2566454675  </span></span><br><span class="line">        getDiffrent2(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：getDiffrent2 total times 2787800964  </span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取连个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent2</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        list1.retainAll(list2);  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent2 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> list1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span>(String str:list1)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(!list2.contains(str))  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(str);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很遗憾，这种方式虽然只要几行代码就搞定，但是这个却更耗时，查看retainAll（）的源码:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;  </span><br><span class="line">    Iterator&lt;E&gt; e = iterator();  </span><br><span class="line">    <span class="keyword">while</span> (e.hasNext()) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!c.contains(e.next())) &#123;  </span><br><span class="line">        e.remove();  </span><br><span class="line">        modified = <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> modified;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>text无需解释这个耗时是必然的，那么我们还有没有更好的办法呢？仔细分析以上两个方法中我都做了mXn次循环，其实完全没有必要循环这么多次，我们的需求是找出两个List中的不同元素,那么我可以这样考虑：用一个map存放lsit的所有元素，其中的key为lsit1的各个元素，value为该元素出现的次数,接着把list2的所有元素也放到map里，如果已经存在则value加1，最后我们只要取出map里value为1的元素即可，这样我们只需循环m+n次，大大减少了循环的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czp.test;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">            list1.add(<span class="string">"test"</span>+i);  </span><br><span class="line">            list2.add(<span class="string">"test"</span>+i*<span class="number">2</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        getDiffrent(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：total times 2566454675  </span></span><br><span class="line">        getDiffrent2(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：getDiffrent2 total times 2787800964  </span></span><br><span class="line">        getDiffrent3(list1,list2);  </span><br><span class="line">        <span class="comment">//输出：getDiffrent3 total times 61763995  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent3</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;(list1.size()+list2.size());  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (String string : list1) &#123;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (String string : list2) &#123;  </span><br><span class="line">            Integer cc = map.get(string);  </span><br><span class="line">            <span class="keyword">if</span>(cc!=<span class="keyword">null</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                map.put(string, ++cc);  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry:map.entrySet())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(entry.getValue()==<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(entry.getKey());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent3 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> list1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent2</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        list1.retainAll(list2);  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent2 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> list1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span>(String str:list1)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(!list2.contains(str))  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(str);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，这种方法大大减少耗时，是方法1的1/4，是方法2的1/40，这个性能的提升时相当可观的，但是，这不是最佳的解决方法，观察方法3我们只是随机取了一个list作为首次添加的标准，这样一旦我们的list2比list1的size大，则我们第二次put时的if判断也会耗时，做如下改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czp.test;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">            list1.add(<span class="string">"test"</span>+i);  </span><br><span class="line">            list2.add(<span class="string">"test"</span>+i*<span class="number">2</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        getDiffrent(list1,list2);  </span><br><span class="line">        getDiffrent2(list1,list2);  </span><br><span class="line">        getDiffrent3(list1,list2);  </span><br><span class="line">        getDiffrent4(list1,list2);  </span><br><span class="line"><span class="comment">//        getDiffrent total times 2789492240  </span></span><br><span class="line"><span class="comment">//        getDiffrent2 total times 3324502695  </span></span><br><span class="line"><span class="comment">//        getDiffrent3 total times 24710682  </span></span><br><span class="line"><span class="comment">//        getDiffrent4 total times 15627685  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent4</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;(list1.size()+list2.size());  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        List&lt;String&gt; maxList = list1;  </span><br><span class="line">        List&lt;String&gt; minList = list2;  </span><br><span class="line">        <span class="keyword">if</span>(list2.size()&gt;list1.size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            maxList = list2;  </span><br><span class="line">            minList = list1;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (String string : maxList) &#123;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (String string : minList) &#123;  </span><br><span class="line">            Integer cc = map.get(string);  </span><br><span class="line">            <span class="keyword">if</span>(cc!=<span class="keyword">null</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                map.put(string, ++cc);  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry:map.entrySet())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(entry.getValue()==<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(entry.getKey());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent4 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent3</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;(list1.size()+list2.size());  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (String string : list1) &#123;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (String string : list2) &#123;  </span><br><span class="line">            Integer cc = map.get(string);  </span><br><span class="line">            <span class="keyword">if</span>(cc!=<span class="keyword">null</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                map.put(string, ++cc);  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(string, <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry:map.entrySet())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(entry.getValue()==<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(entry.getKey());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent3 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取连个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent2</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        list1.retainAll(list2);  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent2 total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> list1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取两个List的不同元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDiffrent</span><span class="params">(List&lt;String&gt; list1, List&lt;String&gt; list2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> st = System.nanoTime();  </span><br><span class="line">        List&lt;String&gt; diff = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line">        <span class="keyword">for</span>(String str:list1)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(!list2.contains(str))  </span><br><span class="line">            &#123;  </span><br><span class="line">                diff.add(str);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"getDiffrent total times "</span>+(System.nanoTime()-st));  </span><br><span class="line">        <span class="keyword">return</span> diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> HashMap </tag>
            
            <tag> javaCollection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中HashMap.put()方法</title>
      <link href="/2019/10/16/java%E4%B8%ADHashMap-put-%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/16/java%E4%B8%ADHashMap-put-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>java中HashMap.put()方法</p><a id="more"></a><p>HashMap的java.util.HashMap.put()方法用于将映射插入到映射中。这意味着我们可以将特定键及其映射的值插入到特定映射中。如果传递现有密钥，则先前的值将被新值替换。如果传递了一对新对，那么该对将作为整体插入。</p><p><strong>句法</strong>：</p><p>Hash_Map.put(key, value)<br><strong>参数</strong>：该方法有两个参数，都是HashMap的Object类型。</p><p><strong>key</strong>：这是指需要插入Map进行映射s的关键元素。<br>                   value：这是指上面的键映射到的值。<br><strong>返回值</strong>：如果传递现有密钥，则返回先前的值。如果传递了一对新对，则返回NULL。</p><p>下面的程序用于说明java.util.HashMap.put()的工作方法<br>HashMap.put()程序1：传递现有密钥时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java code to illustrate the put() method</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hash_Map_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Creating an empty HashMap</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; hash_map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Mapping string values to int keys</span></span><br><span class="line">        hash_map.put(<span class="number">10</span>, <span class="string">"Geeks"</span>);</span><br><span class="line">        hash_map.put(<span class="number">15</span>, <span class="string">"4"</span>);</span><br><span class="line">        hash_map.put(<span class="number">20</span>, <span class="string">"Geeks"</span>);</span><br><span class="line">        hash_map.put(<span class="number">25</span>, <span class="string">"Welcomes"</span>);</span><br><span class="line">        hash_map.put(<span class="number">30</span>, <span class="string">"You"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Displaying the HashMap</span></span><br><span class="line">        System.out.println(<span class="string">"Initial Mappings are: "</span> + hash_map);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Inserting existing key along with new value</span></span><br><span class="line">        String returned_value = (String)hash_map.put(<span class="number">20</span>, <span class="string">"All"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Verifying the returned value</span></span><br><span class="line">        System.out.println(<span class="string">"Returned value is: "</span> + returned_value);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Displayin the new map</span></span><br><span class="line">        System.out.println(<span class="string">"New map is: "</span> + hash_map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Initial Mappings are: &#123;20=Geeks, 25=Welcomes, 10=Geeks, 30=You, 15=4&#125;</span><br><span class="line">Returned value is: Geeks</span><br><span class="line">New map is: &#123;20=All, 25=Welcomes, 10=Geeks, 30=You, 15=4&#125;</span><br></pre></td></tr></table></figure><p>HashMap.put()程序2：传递新密钥时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java code to illustrate the put() method</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hash_Map_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Creating an empty HashMap</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; hash_map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Mapping string values to int keys</span></span><br><span class="line">        hash_map.put(<span class="number">10</span>, <span class="string">"Geeks"</span>);</span><br><span class="line">        hash_map.put(<span class="number">15</span>, <span class="string">"4"</span>);</span><br><span class="line">        hash_map.put(<span class="number">20</span>, <span class="string">"Geeks"</span>);</span><br><span class="line">        hash_map.put(<span class="number">25</span>, <span class="string">"Welcomes"</span>);</span><br><span class="line">        hash_map.put(<span class="number">30</span>, <span class="string">"You"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Displaying the HashMap</span></span><br><span class="line">        System.out.println(<span class="string">"Initial Mappings are: "</span> + hash_map);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Inserting existing key along with new value</span></span><br><span class="line">        String returned_value = (String)hash_map.put(<span class="number">50</span>, <span class="string">"All"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Verifying the returned value</span></span><br><span class="line">        System.out.println(<span class="string">"Returned value is: "</span> + returned_value);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Displayin the new map</span></span><br><span class="line">        System.out.println(<span class="string">"New map is: "</span> + hash_map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Initial Mappings are: &#123;20=Geeks, 25=Welcomes, 10=Geeks, 30=You, 15=4&#125;</span><br><span class="line">Returned value is: null</span><br><span class="line">New map is: &#123;50=All, 20=Geeks, 25=Welcomes, 10=Geeks, 30=You, 15=4&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：对于具有不同数据类型的变体和组合的任何类型的映射，都可以执行相同的操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow(01)</title>
      <link href="/2019/08/14/tensorflow/"/>
      <url>/2019/08/14/tensorflow/</url>
      
        <content type="html"><![CDATA[<p>写的第一个tensorflow玩具,感觉很有趣，就贴一下代码。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Wed Aug 14 08:59:44 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: mwt</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#create data</span></span><br><span class="line">x_data=np.random.rand(<span class="number">100</span>).astype(np.float32)   <span class="comment">#x集合</span></span><br><span class="line">y_data=x_data*<span class="number">0.1</span>+<span class="number">0.3</span>    <span class="comment">#要拟合的权和偏置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#create tensorflow structure start#</span></span><br><span class="line"></span><br><span class="line">Weights=tf.Variable(tf.random_uniform([<span class="number">1</span>],<span class="number">-1.0</span>,<span class="number">1.0</span>))     <span class="comment">#一个一维的范围为-1---1的全职</span></span><br><span class="line">biases=tf.Variable(tf.zeros([<span class="number">1</span>]))        <span class="comment">#偏差一开始为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y=Weights*x_data+biases</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loss=tf.reduce_mean(tf.square(y-y_data))</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line">train=optimizer.minimize(loss)</span><br><span class="line"><span class="comment">#版本1.2一下就用tf.initializa_all_variable ()</span></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span> <span class="keyword">and</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">0</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment">#endl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess.run(init)           <span class="comment">#激活init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">2001</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span>==<span class="number">0</span>:</span><br><span class="line">        print(step,sess.run(Weights),sess.run(biases))</span><br></pre></td></tr></table></figure><p>以下是循环500次得出的biases和Weights<br><img src="/2019/08/14/tensorflow/1.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次win10下安装tensorflow的踩坑经历</title>
      <link href="/2019/08/12/%E4%B8%80%E6%AC%A1win10%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/08/12/%E4%B8%80%E6%AC%A1win10%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>一次悲惨的tensorflow踩坑经历<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/4.jpg" alt></p><a id="more"></a><p>废话少说:本人配置是1660-ti i7-9750hq  需要 anaconda3 cuda9.0 以及cudnn7.0 需要另外版本的可以自行百度。<br>cuda9.0以及cudnn7.0百度云链接: <a href="https://pan.baidu.com/s/1qdpFUbHgKHnHoJBqVFjP3Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1qdpFUbHgKHnHoJBqVFjP3Q</a> 提取码: 6nsr<br>anaconda由于国外源速度太捉急，推荐使用清华镜像。<br>可以在promte中输入以下更换成清华镜像。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">conda config --add channels https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span></span><br><span class="line">conda config --add channels https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span></span><br><span class="line"></span><br><span class="line"># 设置搜索时显示通道地址</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p>1.因为tensorflow只支持python3.5-3.6,所以anaconda 安装的环境代码为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name tensorflow_gpu python=<span class="number">3.5</span></span><br><span class="line">conda create --name tensorflow_gpu python=<span class="number">3.6</span></span><br></pre></td></tr></table></figure><p>2.之后激活环境  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate tensorflow_gpu</span><br></pre></td></tr></table></figure><p>你打开navigter界面会发现存在<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/ananv.png" alt>基本的环境就已经配好了<br>3.之后安装tensorflow-gpu的组件，顺便安装一个keras的gpu版本,keras也是一个神经网络库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install tensorflow-gpu</span><br><span class="line">conda install keras-gpu</span><br></pre></td></tr></table></figure><p>3.1以上两行存在疑问，虽然anaconda安装好tensorflow-gpu1.10就已经自带cuda8.0和cudnn6.0,但是我发现经过该尝试后存在环境变量里没有相应配置，导致不能import tensorflow。笔者在多次尝试后还是选择了pip安装，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==<span class="number">1.10</span> -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple #在包名后面加==和版本号可指定版本安装</span></span><br><span class="line">pip install tensorflow-gpu -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple #默认安装最新版本</span></span><br></pre></td></tr></table></figure><p>笔者选择了1.6.0版本，这里不推荐安装最新版本的tensorflow，可能会存在兼容问题。<br>运行完是这样的<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/1.png" alt></p><p>import一下，此时没有安装cuda9.0，出现以下错误<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/2.png" alt></p><p>4.之后配置cuda9.0,选择相应的版本。笔者选择安装本地版，在这个墙比山高的地方，网络版速度实在捉急<br>进度条读完就进入安装界面，(如果你的驱动版本高于cuda9.0，它会提示识别不了，但是不用管他，装就完事了)<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/3.png" alt><br>之后选择精简版安装(自定义安装，因为我们只需要cuda)</p><p>5.安装完解压cudnn。将解压出来的三个文件夹放到v9文件夹下<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/4.png" alt><br>惯例，添加环境变量<br><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/5.png" alt></p><p>保存退出。<br>再重新进入anaconda promote，运行gpu环境</p><p>一般来说到这里就完结了，一下讲一下笔者遇到的玄学时刻</p><p>001.<br>numpy版本问题，一开始numpy版本为1.16，出现了numpy 版本不兼容tensorflow的问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: Something is wrong with the numpy installation. While importing we detected an older version of numpy in ['C:\\Users\\Administrator\\Anaconda3\\lib\\site-packages\\numpy']. One method of fixing this is to repeatedly uninstall numpy until none is found, then reinstall this version.</span><br></pre></td></tr></table></figure><p><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/6.png" alt></p><p>随后笔者更改numpy1.13，代码以下<br>卸载numpy包</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall numpy</span><br></pre></td></tr></table></figure><p><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/7.png" alt></p><p>安装版本为1.13numpy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy=<span class="number">1.13</span></span><br></pre></td></tr></table></figure><p>笔者这里终于成功了，教训深刻。。。可以看出cuda成功运行</p><p><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/success.png" alt></p><p>这里附上hello world 代码嘻嘻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">hello = tf.constant(<span class="string">"Hello!TensorFlow"</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p>002.windows版本tensorflow的兼容性参考</p><p><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/8.png" alt></p><p><img src="/2019/08/12/一次win10下安装tensorflow的踩坑经历/9.png" alt><br>ps.<br>实际上，2017.12的时候，tensorflow 1.4及以下的不支持cuda9.0，且tensorflow1.0版本以上是不支持cuda8.0以下的.tensorflow -gpu1.5以后不支持使用CUDA8.0.cuda8.0对应的cuDNN必须是6.0版的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sekiro之河原田直盛(1)</title>
      <link href="/2019/08/04/sekiro/"/>
      <url>/2019/08/04/sekiro/</url>
      
        <content type="html"><![CDATA[<p>  那么今天打的怪是何方妖孽呢？武士大将河原田直盛，嗯，就是这个看起来挺牛逼的名字，其实说实话是挺牛逼的（你把我逼死了好几十次。。。orz我真的服了）。就是这个小崽子<br><img src="/2019/08/04/sekiro/0.jpg" alt></p><a id="more"></a><p>  本着莽就完事的宗旨，上来就被土肥原三刀劈翻在地，出现了上来就秒死的尴尬状况，我当即按下RB，半条命再战，结果也不用猜了<br><img src="/2019/08/04/sekiro/4.jpg" alt></p><p>  随后n把我逐渐学会了关于死字的书法。我吐了。</p><p>  欸这就很难受了，随即再战，两段钩锁飞到面前，B键猛冲，就是要砍脸，仙法–X键狂点之术！！很搞笑我被土肥原踹了下去，复活回来就发现土肥原被困在一个小角落<br><img src="/2019/08/04/sekiro/1.jpg" alt><br><img src="/2019/08/04/sekiro/3.jpg" alt><br>  当我熟练使用gay洛的拜年剑法的时候，惨了，土肥原40米大刀一招扫地龙已把我收了。。</p><p>  随即又是n次<br><img src="/2019/08/04/sekiro/4.jpg" alt></p><p>  终于我发现可以忍杀掉一条命的时候，又tm的最悲惨的是，人跳下去了，那个红点却不见了。完了，又是被砍死。<br>  途中还有几次忍杀成功的，两刀砍死。。。<br><img src="/2019/08/04/sekiro/4.jpg" alt></p><p>  终于这回轻装上阵，拿起刀就是往脸上招呼，虽然没有一下子忍杀掉，但土肥原招架不住我犀利的刀法，一条命get。我随即狂按B键迅速拉开身位，熟练地拿起小葫芦灌了一口药。看到血量回升的感觉真的舒服。废话不多说，敌进我退敌疲我打，关键时候乱刀招呼，直接忍杀！<br>  炫，疯狂地炫</p><p><img src="/2019/08/04/sekiro/2.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 之狼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当然是线段树模板</title>
      <link href="/2019/07/20/%E5%BD%93%E7%84%B6%E6%98%AF%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/07/20/%E5%BD%93%E7%84%B6%E6%98%AF%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segt</span> &#123;</span></span><br><span class="line">ll *a;</span><br><span class="line">ll SUM, MAX, MIN;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">ll sum, lz, max, min, <span class="built_in">set</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum += v * (r - l + <span class="number">1</span>);</span><br><span class="line">lz += v;</span><br><span class="line">max += v;</span><br><span class="line">min += v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval</span><span class="params">(ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum = v * (r - l + <span class="number">1</span>);</span><br><span class="line">lz = <span class="number">0</span>;</span><br><span class="line">max = v;</span><br><span class="line">min = v;</span><br><span class="line"><span class="built_in">set</span> = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].sum = tree[<span class="number">2</span> * x].sum + tree[<span class="number">2</span> * x + <span class="number">1</span>].sum;</span><br><span class="line">tree[x].max = max(tree[<span class="number">2</span> * x].max, tree[<span class="number">2</span> * x + <span class="number">1</span>].max);</span><br><span class="line">tree[x].min = min(tree[<span class="number">2</span> * x].min, tree[<span class="number">2</span> * x + <span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[x].<span class="built_in">set</span> != <span class="number">-1</span>) &#123;</span><br><span class="line">tree[<span class="number">2</span> * x].setval(tree[x].<span class="built_in">set</span>);</span><br><span class="line">tree[<span class="number">2</span> * x + <span class="number">1</span>].setval(tree[x].<span class="built_in">set</span>);</span><br><span class="line">tree[x].<span class="built_in">set</span> = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tree[x].lz != <span class="number">0</span>) &#123;</span><br><span class="line">tree[<span class="number">2</span> * x].update(tree[x].lz);</span><br><span class="line">tree[<span class="number">2</span> * x + <span class="number">1</span>].update(tree[x].lz);</span><br><span class="line">tree[x].lz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].l = l;</span><br><span class="line">tree[x].r = r;</span><br><span class="line">tree[x].sum = tree[x].max = tree[x].min = tree[x].lz = <span class="number">0</span>;</span><br><span class="line">tree[x].<span class="built_in">set</span> = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">build(<span class="number">2</span> * x,     l,       mid);</span><br><span class="line">build(<span class="number">2</span> * x + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 l-r 范围的数都加上 c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123;</span><br><span class="line">tree[x].update(c);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) update(<span class="number">2</span> * x, l, r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) update(<span class="number">2</span> * x + <span class="number">1</span>, l, r, c);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 l-r 范围的数变成 c， 如果 set 为 -1 表示没有被赋值过</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123;</span><br><span class="line">tree[x].setval(c);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) setval(<span class="number">2</span> * x, l, r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) setval(<span class="number">2</span> * x + <span class="number">1</span>, l, r, c);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间和</span></span><br><span class="line"><span class="function">ll <span class="title">querySUM</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res += querySUM(<span class="number">2</span> * x, l, r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res += querySUM(<span class="number">2</span> * x + <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间最大值</span></span><br><span class="line"><span class="function">ll <span class="title">queryMAX</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = -maxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res = max(res, queryMAX(<span class="number">2</span> * x, l, r));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res = max(res, queryMAX(<span class="number">2</span> * x + <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间最小值</span></span><br><span class="line"><span class="function">ll <span class="title">queryMIN</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = maxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res = min(res, queryMIN(<span class="number">2</span> * x, l, r));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res = min(res, queryMIN(<span class="number">2</span> * x + <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性查询区间 SUM，MAX，MIN</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line">SUM += tree[x].sum;</span><br><span class="line">MAX = max(MAX, tree[x].max);</span><br><span class="line">MIN = min(MIN, tree[x].min);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) query(<span class="number">2</span> * x, l, r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) query(<span class="number">2</span> * x + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125; tree;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署blog</title>
      <link href="/2019/07/20/%E6%97%A5%E5%B8%B8/"/>
      <url>/2019/07/20/%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>部署了hexo+github的博客</p><a id="more"></a><p>参考了<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> 搭建基于github的个人blog<br>参考了<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a> 对网站进行优化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还是畅通工程</title>
      <link href="/2019/07/20/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/07/20/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>这还是一道基本的并查集模板题 ，init()初始化 ,find()找父亲 ，join()按照rank数组的高度合并 低的到高的上 ，大功告成啦。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ran[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">ran[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == pre[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = find(x);</span><br><span class="line"><span class="keyword">int</span> fy = find(y);</span><br><span class="line"><span class="keyword">if</span> (fx == fy) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ran[x] &lt; ran[y]) pre[fx] = fy;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre[fy] = fx;</span><br><span class="line"><span class="keyword">if</span> (ran[fx] == ran[fy]) ran[fx]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FAST_IO;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">join(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (pre[i] == i) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
