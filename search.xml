<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>当然是线段树模板</title>
      <link href="/2019/07/20/%E5%BD%93%E7%84%B6%E6%98%AF%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/07/20/%E5%BD%93%E7%84%B6%E6%98%AF%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segt</span> &#123;</span></span><br><span class="line">ll *a;</span><br><span class="line">ll SUM, MAX, MIN;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">ll sum, lz, max, min, <span class="built_in">set</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum += v * (r - l + <span class="number">1</span>);</span><br><span class="line">lz += v;</span><br><span class="line">max += v;</span><br><span class="line">min += v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval</span><span class="params">(ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum = v * (r - l + <span class="number">1</span>);</span><br><span class="line">lz = <span class="number">0</span>;</span><br><span class="line">max = v;</span><br><span class="line">min = v;</span><br><span class="line"><span class="built_in">set</span> = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].sum = tree[<span class="number">2</span> * x].sum + tree[<span class="number">2</span> * x + <span class="number">1</span>].sum;</span><br><span class="line">tree[x].max = max(tree[<span class="number">2</span> * x].max, tree[<span class="number">2</span> * x + <span class="number">1</span>].max);</span><br><span class="line">tree[x].min = min(tree[<span class="number">2</span> * x].min, tree[<span class="number">2</span> * x + <span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[x].<span class="built_in">set</span> != <span class="number">-1</span>) &#123;</span><br><span class="line">tree[<span class="number">2</span> * x].setval(tree[x].<span class="built_in">set</span>);</span><br><span class="line">tree[<span class="number">2</span> * x + <span class="number">1</span>].setval(tree[x].<span class="built_in">set</span>);</span><br><span class="line">tree[x].<span class="built_in">set</span> = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tree[x].lz != <span class="number">0</span>) &#123;</span><br><span class="line">tree[<span class="number">2</span> * x].update(tree[x].lz);</span><br><span class="line">tree[<span class="number">2</span> * x + <span class="number">1</span>].update(tree[x].lz);</span><br><span class="line">tree[x].lz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].l = l;</span><br><span class="line">tree[x].r = r;</span><br><span class="line">tree[x].sum = tree[x].max = tree[x].min = tree[x].lz = <span class="number">0</span>;</span><br><span class="line">tree[x].<span class="built_in">set</span> = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">build(<span class="number">2</span> * x,     l,       mid);</span><br><span class="line">build(<span class="number">2</span> * x + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 l-r 范围的数都加上 c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123;</span><br><span class="line">tree[x].update(c);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) update(<span class="number">2</span> * x, l, r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) update(<span class="number">2</span> * x + <span class="number">1</span>, l, r, c);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 l-r 范围的数变成 c， 如果 set 为 -1 表示没有被赋值过</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123;</span><br><span class="line">tree[x].setval(c);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) setval(<span class="number">2</span> * x, l, r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) setval(<span class="number">2</span> * x + <span class="number">1</span>, l, r, c);</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间和</span></span><br><span class="line"><span class="function">ll <span class="title">querySUM</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res += querySUM(<span class="number">2</span> * x, l, r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res += querySUM(<span class="number">2</span> * x + <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间最大值</span></span><br><span class="line"><span class="function">ll <span class="title">queryMAX</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = -maxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res = max(res, queryMAX(<span class="number">2</span> * x, l, r));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res = max(res, queryMAX(<span class="number">2</span> * x + <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询区间最小值</span></span><br><span class="line"><span class="function">ll <span class="title">queryMIN</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">ll res = maxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line"><span class="keyword">return</span> tree[x].min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) res = min(res, queryMIN(<span class="number">2</span> * x, l, r));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) res = min(res, queryMIN(<span class="number">2</span> * x + <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性查询区间 SUM，MAX，MIN</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[x].l, R = tree[x].r;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((l &lt;= L) &amp;&amp; (r &gt;= R)) &#123; <span class="comment">// 要更新区间包括了该区间</span></span><br><span class="line">SUM += tree[x].sum;</span><br><span class="line">MAX = max(MAX, tree[x].max);</span><br><span class="line">MIN = min(MIN, tree[x].min);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushdown(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) query(<span class="number">2</span> * x, l, r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) query(<span class="number">2</span> * x + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125; tree;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署blog</title>
      <link href="/2019/07/20/%E6%97%A5%E5%B8%B8/"/>
      <url>/2019/07/20/%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>部署了hexo+github的博客</p><a id="more"></a><p>参考了<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> 搭建基于github的个人blog<br>参考了<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a> 对网站进行优化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还是畅通工程</title>
      <link href="/2019/07/20/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/07/20/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>这还是一道基本的并查集模板题 ，init()初始化 ,find()找父亲 ，join()按照rank数组的高度合并 低的到高的上 ，大功告成啦。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ran[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">ran[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == pre[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = find(x);</span><br><span class="line"><span class="keyword">int</span> fy = find(y);</span><br><span class="line"><span class="keyword">if</span> (fx == fy) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ran[x] &lt; ran[y]) pre[fx] = fy;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre[fy] = fx;</span><br><span class="line"><span class="keyword">if</span> (ran[fx] == ran[fy]) ran[fx]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FAST_IO;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">join(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (pre[i] == i) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
